import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import norm, shapiro, normaltest, kstest
from io import BytesIO
from docx import Document
from docx.shared import Inches
    import base64
    import os

    st.set_page_config(page_title="Consumo Referencial", layout="centered")

    # --- Menu de Navega√ß√£o ---
    aba = st.sidebar.radio("Navega√ß√£o", ["üìä C√°lculo do Consumo", "üìò Sobre o Modelo Estat√≠stico"])

    # --- Aba 1: C√°lculo do Consumo ---
    if aba == "üìä C√°lculo do Consumo":
        st.title("C√°lculo do Consumo Referencial")

        st.markdown("""
        Este aplicativo permite calcular o **consumo mensal de refer√™ncia** com base em dados hist√≥ricos
        para sistemas de abastecimento de √°gua, utilizando **percentis estat√≠sticos**.

        > ‚ÑπÔ∏è Os dados de consumo mensal podem ser provenientes de **micromedi√ß√µes** (hidr√¥metros) ou **macromedi√ß√µes** (na sa√≠da do reservat√≥rio).  
        > √â responsabilidade do usu√°rio conhecer a origem dos dados fornecidos.
        """)

        st.header("1. Dados de Consumo Mensal")
        uploaded_file = st.file_uploader("Fa√ßa o upload de um arquivo CSV com os dados de consumo (em m¬≥)", type="csv")

        if uploaded_file:
            df = pd.read_csv(uploaded_file)
            if df.shape[1] >= 2:
                df.columns = ['M√™s', 'Consumo (m¬≥)']
                st.success("Arquivo carregado com sucesso!")
                st.dataframe(df)

                st.header("2. Par√¢metros do Projeto")
                percentil = st.slider("Percentil de Projeto (%)", 50, 99, 95)
                dias_mes = st.number_input("N√∫mero de dias do m√™s", min_value=1, max_value=31, value=30)
                tempo_dia = st.number_input("Tempo di√°rio (segundos)", min_value=1, value=86400)
                k1 = st.number_input("Coeficiente de m√°x. di√°ria (K1)", min_value=1.0, value=1.4)
                k2 = st.number_input("Coeficiente de m√°x. hor√°ria (K2)", min_value=1.0, value=2.0)
                modelo = st.selectbox("Modelo Estat√≠stico", ["KDE", "Distribui√ß√£o Normal"])

                consumo = df['Consumo (m¬≥)'].values
                consumo_ref = np.percentile(consumo, percentil)
                media = np.mean(consumo)
                desvio_padrao = np.std(consumo)
                q_med = (consumo_ref / dias_mes) / tempo_dia * 1000
                q_max_dia = q_med * k1
                q_max_hora = q_med * k2
                q_max_real = (np.max(consumo) / dias_mes) / tempo_dia * 1000

                st.header("3. Resultados")
                st.metric("Consumo Referencial (m¬≥)", f"{consumo_ref:,.0f}".replace(",", "."))
                st.metric("Desvio Padr√£o (m¬≥)", f"{desvio_padrao:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))
                st.metric("Vaz√£o M√©dia (L/s)", f"{q_med:.2f}".replace(".", ","))
                st.metric("Vaz√£o M√°x. Di√°ria (L/s)", f"{q_max_dia:.2f}".replace(".", ","))
                st.metric("Vaz√£o M√°x. Hor√°ria (L/s)", f"{q_max_hora:.2f}".replace(".", ","))
                st.metric("Vaz√£o M√°xima Dia e Hora (L/s)", f"{q_max_real:.2f}".replace(".", ","))

                # Gr√°fico de distribui√ß√£o com curva KDE e normal
                st.header("4. Gr√°fico de Distribui√ß√£o")
                fig1, ax1 = plt.subplots(figsize=(10, 5))
                sns.histplot(consumo, kde=(modelo == "KDE"), stat="density", color="skyblue", edgecolor="black", bins=12, ax=ax1)

                x_vals = np.linspace(min(consumo), max(consumo), 1000)
                normal_curve = norm.pdf(x_vals, loc=media, scale=desvio_padrao)
                ax1.plot(x_vals, normal_curve, color='red', linestyle='--', label='Distribui√ß√£o Normal')
                ax1.axvline(consumo_ref, color='black', linestyle=':', label=f'{percentil}% ‚âà {consumo_ref:,.0f} m¬≥')
                ax1.set_xlabel("Consumo mensal (m¬≥)")
                ax1.set_ylabel("Densidade estimada")
                ax1.set_title("Distribui√ß√£o do Consumo com KDE e Normal")
                ax1.legend()
                st.pyplot(fig1)

                # Gr√°fico CDF
                st.header("5. Compara√ß√£o das CDFs")
                kde = sns.kdeplot(consumo, bw_adjust=1)
                kde_y = kde.get_lines()[0].get_ydata()
                kde_x = kde.get_lines()[0].get_xdata()
                plt.clf()
                cdf_kde = np.cumsum(kde_y)
                cdf_kde = cdf_kde / cdf_kde[-1]
                cdf_norm = norm.cdf(kde_x, loc=media, scale=desvio_padrao)

                fig2, ax2 = plt.subplots(figsize=(8, 5))
                ax2.plot(kde_x, cdf_kde, label='CDF da KDE', color='blue')
                ax2.plot(kde_x, cdf_norm, label='CDF da Normal', color='red', linestyle='--')
                ax2.set_title("Fun√ß√µes de Distribui√ß√£o Acumulada (CDF)
KDE vs Distribui√ß√£o Normal")
                ax2.set_xlabel("Consumo mensal de √°gua (m¬≥)")
                ax2.set_ylabel("Probabilidade acumulada")
                ax2.legend()
                ax2.grid(True)
                st.pyplot(fig2)

                # Testes de normalidade
                st.header("6. Testes de Normalidade")
                stat1, p1 = shapiro(consumo)
                stat2, p2 = normaltest(consumo)
                stat3, p3 = kstest(consumo, 'norm', args=(media, desvio_padrao))

                interp = lambda p: "‚úÖ Dados seguem distribui√ß√£o normal." if p > 0.05 else "‚ö†Ô∏è Dados n√£o seguem distribui√ß√£o normal."

                st.write(f"**Shapiro-Wilk**: Estat√≠stica = {stat1:.3f}, p-valor = {p1:.3f} ‚Üí {interp(p1)}")
                st.write(f"**D'Agostino e Pearson**: Estat√≠stica = {stat2:.3f}, p-valor = {p2:.3f} ‚Üí {interp(p2)}")
                st.write(f"**Kolmogorov-Smirnov (KS)**: Estat√≠stica = {stat3:.3f}, p-valor = {p3:.3f} ‚Üí {interp(p3)}")

    else:
        st.info("Aguardando upload do arquivo CSV com dados de consumo.")

    # --- Aba 2: Sobre o Modelo Estat√≠stico ---
    elif aba == "üìò Sobre o Modelo Estat√≠stico":
        st.title("üìò Sobre o Modelo Estat√≠stico")
        st.markdown("Visualize abaixo o conte√∫do t√©cnico referente ao modelo estat√≠stico utilizado.")
        try:
            paginas = sorted([f for f in os.listdir("docs") if f.endswith(".png")])
            idx = st.selectbox("Selecionar p√°gina:", range(len(paginas)), format_func=lambda x: f"P√°gina {x+1}")
            st.image("docs/" + paginas[idx], use_column_width=True)
        except Exception as e:
            st.error("Erro ao carregar imagens da pasta 'docs/'. Verifique se elas est√£o no reposit√≥rio.")
