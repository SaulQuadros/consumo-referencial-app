#!/usr/bin/env python
# coding: utf-8

# In[ ]:


import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import norm, shapiro, normaltest, kstest
import os
import base64

# Ajuste de layout/t√≠tulo da p√°gina
st.set_page_config(page_title="Consumo Referencial", layout="centered")

# Navega√ß√£o por abas
aba = st.sidebar.radio("Navegar para:", ["üßÆ C√°lculo do Consumo", "üìò Sobre o Modelo Estat√≠stico"])

if aba == "üßÆ C√°lculo do Consumo":
    st.title("C√°lculo do Consumo Referencial")
    st.markdown("üîß Interface de c√°lculo do consumo (conte√∫do ocultado aqui para simplicidade).")

    st.header("1. Dados de Consumo Mensal")
    uploaded_file = st.file_uploader("Fa√ßa o upload de um arquivo CSV com os dados de consumo (em m¬≥)", type="csv")

    if uploaded_file:
        df = pd.read_csv(uploaded_file)
        if df.shape[1] >= 2:
            df.columns = ['M√™s', 'Consumo (m¬≥)']
            st.success("Arquivo carregado com sucesso!")
            st.dataframe(df)

            st.markdown("""
            ‚ÑπÔ∏è Os dados hist√≥ricos de consumo mensal podem ter origem em micromedi√ß√µes (hidr√¥metros) ou macromedi√ß√µes (na sa√≠da do reservat√≥rio).
            √â importante conhecer a origem dos dados para interpretar corretamente os resultados.
            """)

            st.header("2. Par√¢metros do Projeto")
            modelo = st.selectbox("Modelo Estat√≠stico", ["KDE", "Distribui√ß√£o Normal"])
            percentil = st.slider("Percentil de Projeto (%)", 50, 99, 95)
            dias_mes = st.number_input("N√∫mero de dias do m√™s", min_value=1, max_value=31, value=30)
            # Valor fixo para tempo di√°rio (86400 s)
            tempo_dia = 86400

            k1 = st.number_input("Coeficiente de m√°x. di√°ria (K1)", min_value=1.0, value=1.4)
            k2 = st.number_input("Coeficiente de m√°x. hor√°ria (K2)", min_value=1.0, value=2.0)

            consumo = df['Consumo (m¬≥)'].values

            # C√°lculo do consumo referencial
            if modelo == "KDE":
                kde = sns.kdeplot(consumo, bw_adjust=1)
                kde_y = kde.get_lines()[0].get_ydata()
                kde_x = kde.get_lines()[0].get_xdata()
                plt.clf()
                cdf_kde = np.cumsum(kde_y)
                cdf_kde = cdf_kde / cdf_kde[-1]
                consumo_ref = kde_x[np.searchsorted(cdf_kde, percentil / 100)]
            else:
                consumo_ref = np.percentile(consumo, percentil)

            # C√°lculo das vaz√µes
            q_med = (consumo_ref / dias_mes) / tempo_dia * 1000
            q_max_dia = q_med * k1
            q_max_hora = q_med * k2
            q_max_real = q_med * k1 * k2

            desvio_padrao = np.std(consumo)
            media = np.mean(consumo)

            st.header("3. Resultados")
            st.metric("Consumo Referencial (m¬≥)", f"{consumo_ref:,.0f}".replace(",", "X").replace(".", ",").replace("X", "."))
            st.metric("Desvio Padr√£o (m¬≥)", f"{desvio_padrao:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))
            st.metric("Vaz√£o M√©dia (L/s)", f"{q_med:.2f}".replace(".", ","))
            st.metric("Vaz√£o M√°x. Di√°ria (L/s)", f"{q_max_dia:.2f}".replace(".", ","))
            st.metric("Vaz√£o M√°x. Hor√°ria (L/s)", f"{q_max_hora:.2f}".replace(".", ","))
            st.metric("Vaz√£o M√°x. Dia+Hora (L/s)", f"{q_max_real:.2f}".replace(".", ","))

            st.header("4. Testes de Normalidade")
            stat_sw, p_sw = shapiro(consumo)
            stat_dp, p_dp = normaltest(consumo)
            stat_ks, p_ks = kstest(consumo, 'norm', args=(media, desvio_padrao))

            def interpreta(p):
                return "‚úîÔ∏è Aceita a hip√≥tese de normalidade." if p > 0.05 else "‚ùå Rejeita a hip√≥tese de normalidade."

            st.write(f"**Shapiro-Wilk**: Estat√≠stica = {stat_sw:.3f}, p-valor = {p_sw:.3f} ‚Äî {interpreta(p_sw)}")
            st.write(f"**D'Agostino e Pearson**: Estat√≠stica = {stat_dp:.3f}, p-valor = {p_dp:.3f} ‚Äî {interpreta(p_dp)}")
            st.write(f"**Kolmogorov-Smirnov (KS)**: Estat√≠stica = {stat_ks:.3f}, p-valor = {p_ks:.3f} ‚Äî {interpreta(p_ks)}")

            st.header("5. Gr√°fico de Distribui√ß√£o")
            fig1, ax1 = plt.subplots(figsize=(10, 5))
            sns.histplot(consumo, kde=True, stat="density", color="skyblue", edgecolor="black", bins=12, ax=ax1)
            x_vals = np.linspace(min(consumo), max(consumo), 1000)
            normal_curve = norm.pdf(x_vals, loc=media, scale=desvio_padrao)
            ax1.plot(x_vals, normal_curve, color='red', linestyle='--', label='Distribui√ß√£o Normal')
            ax1.axvline(consumo_ref, color='black', linestyle=':', label=f'{percentil}% ‚âà {consumo_ref:,.0f} m¬≥')
            ax1.set_xlabel("Consumo mensal (m¬≥)")
            ax1.set_ylabel("Densidade estimada")
            ax1.set_title("Distribui√ß√£o do Consumo com KDE e Normal")
            ax1.legend()
            st.pyplot(fig1)

            st.header("6. Fun√ß√µes de Distribui√ß√£o Acumulada")
            kde = sns.kdeplot(consumo, bw_adjust=1)
            kde_y = kde.get_lines()[0].get_ydata()
            kde_x = kde.get_lines()[0].get_xdata()
            plt.clf()
            cdf_kde = np.cumsum(kde_y)
            cdf_kde = cdf_kde / cdf_kde[-1]
            cdf_norm = norm.cdf(kde_x, loc=media, scale=desvio_padrao)

            fig2, ax2 = plt.subplots(figsize=(8, 5))
            ax2.plot(kde_x, cdf_kde, label='CDF da KDE', color='blue')
            ax2.plot(kde_x, cdf_norm, label='CDF da Normal', color='red', linestyle='--')
            ax2.set_title("Fun√ß√µes de Distribui√ß√£o Acumulada (CDF) KDE vs Distribui√ß√£o Normal")
            ax2.set_xlabel("Consumo mensal de √°gua (m¬≥)")
            ax2.set_ylabel("Probabilidade acumulada")
            ax2.legend()
            ax2.grid(True)
            st.pyplot(fig2)

elif aba == "üìò Sobre o Modelo Estat√≠stico":
    st.title("üìò Sobre o Modelo Estat√≠stico")
    st.write("Visualize abaixo o relat√≥rio completo em PDF.")

    # Nome do arquivo PDF
    pdf_file = "03_Estatistica_2025.pdf"

    if os.path.exists(pdf_file):
        # L√™ o arquivo PDF e o converte para base64
        with open(pdf_file, "rb") as f:
            base64_pdf = base64.b64encode(f.read()).decode('utf-8')
        # Cria um iframe para exibir o PDF
        pdf_display = f'<iframe src="data:application/pdf;base64,{base64_pdf}" width="700" height="900" type="application/pdf"></iframe>'
        st.markdown(pdf_display, unsafe_allow_html=True)
    else:
        st.warning(f"Arquivo PDF '{pdf_file}' n√£o encontrado no diret√≥rio atual.")

