#!/usr/bin/env python
# coding: utf-8

# In[ ]:


import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import norm, shapiro, normaltest, kstest
import os
import base64

from io import BytesIO
from docx import Document
from docx.shared import Inches, Cm

# 1) Configura√ß√£o da p√°gina (deve ser a primeira chamada de Streamlit)
st.set_page_config(page_title="Consumo Referencial", layout="centered")

# 2) Persist√™ncia do DataFrame e chave do uploader no session_state
if "df_consumo" not in st.session_state:
    st.session_state.df_consumo = None
if "uploader_key" not in st.session_state:
    st.session_state.uploader_key = 0

# 3) Submenu "Abastecimento de √Ågua" com as quatro op√ß√µes
st.sidebar.title("Demanda H√≠drica:")
aba = st.sidebar.selectbox("Consumo e Vaz√£o", [
    "üßÆ C√°lculo",
    "üìä Gerar Histograma",
    "‚ÑπÔ∏è Sobre esse App",
    "üìò Sobre o Modelo Estat√≠stico"
])

# Fun√ß√£o para formata√ß√£o num√©rica: ponto para milhar e v√≠rgula para decimal
def format_num(value, decimals=2):
    fmt = f",.{decimals}f" if decimals > 0 else f",.0f"
    return f"{value:{fmt}}".replace(",", "X").replace(".", ",").replace("X", ".")

# 4) Aba "C√°lculo do Consumo e Vaz√£o"
if aba == "üßÆ C√°lculo":
    st.title("C√°lculo do Consumo Referencial")

    st.header("Dados do Projeto")
    # Limite de 140 caracteres para os campos de texto
    nome_projeto = st.text_input("Nome do Projeto", value="Projeto 1", max_chars=140)
    tecnico_operador = st.text_input("T√©cnico Operador", value="", max_chars=140)
    tipo_medicao = st.selectbox("Tipo de Medi√ß√£o", [
        "Micromedi√ß√£o - Hidr√¥metros",
        "Macromedi√ß√£o - Sensores de Vaz√£o"
    ])

    st.header("1. Dados de Consumo Mensal")
    # Se o CSV j√° estiver carregado, exibe mensagem e permite carregar outro
    if st.session_state.df_consumo is not None:
        st.info("Arquivo CSV j√° carregado.")
        if st.button("Carregar outro arquivo CSV"):
            st.session_state.df_consumo = None
            st.session_state.uploader_key += 1  # Reinicializa o uploader
            pass
    else:
        uploaded_file = st.file_uploader(
            "Fa√ßa o upload de um arquivo CSV (2 colunas: M√™s, Consumo (m¬≥))",
            type="csv",
            key=st.session_state.uploader_key
        )
        if uploaded_file is not None:
            try:
                df = pd.read_csv(uploaded_file)
                if df.shape[1] >= 2:
                    df.columns = ['M√™s', 'Consumo (m¬≥)']
                    st.session_state.df_consumo = df
                    st.success("Arquivo carregado com sucesso!")
                else:
                    st.error("O arquivo precisa ter pelo menos duas colunas.")
            except Exception as e:
                st.error(f"Erro ao ler o CSV: {e}")

    # Se o CSV est√° carregado, prossegue com o c√°lculo
    if st.session_state.df_consumo is not None:
        df = st.session_state.df_consumo
        st.dataframe(df)

        st.header("2. Par√¢metros do Projeto")
        modelo = st.selectbox("Modelo Estat√≠stico", ["KDE", "Distribui√ß√£o Normal"])
        percentil = st.slider("Percentil de Projeto (%)", 50, 99, 95)
        dias_mes = st.number_input("N√∫mero de dias do m√™s", min_value=1, max_value=31, value=30)

        # Novo campo: N√∫mero de horas di√°rias de opera√ß√£o (1 <= t <= 24)
        horas_operacao = st.number_input("N√∫mero de horas di√°rias de opera√ß√£o", min_value=1, max_value=24, value=24, step=1)

        tempo_dia = 86400  # Valor fixo (segundos em um dia)
        k1 = st.number_input("Coeficiente de m√°x. di√°ria (K1)", min_value=1.0, value=1.4)
        k2 = st.number_input("Coeficiente de m√°x. hor√°ria (K2)", min_value=1.0, value=2.0)

        consumo = df['Consumo (m¬≥)'].values

        # C√°lculo do consumo referencial
        if modelo == "KDE":
            fig_temp, ax_temp = plt.subplots()
            kde = sns.kdeplot(consumo, bw_adjust=1, ax=ax_temp)
            kde_y = kde.get_lines()[0].get_ydata()
            kde_x = kde.get_lines()[0].get_xdata()
            plt.close(fig_temp)
            cdf_kde = np.cumsum(kde_y)
            cdf_kde = cdf_kde / cdf_kde[-1]
            consumo_ref = kde_x[np.searchsorted(cdf_kde, percentil / 100)]
        else:
            consumo_ref = np.percentile(consumo, percentil)

        # Fator de ajuste (r = 24 / t)
        r = 24 / horas_operacao

        # C√°lculo das vaz√µes (com fator de ajuste)
        q_med_base = (consumo_ref / dias_mes) / tempo_dia * 1000
        q_med = q_med_base * r
        q_max_dia = q_med * k1
        q_max_hora = q_med * k2
        q_max_real = q_med * k1 * k2

        desvio_padrao = np.std(consumo)
        media = np.mean(consumo)

        st.header("3. Resultados")
        # Exibi√ß√£o em 3 colunas e 2 linhas
        col1, col2, col3 = st.columns(3)
        # Primeira linha
        col1.metric("Consumo Referencial (m¬≥)", format_num(consumo_ref, 0))
        col2.metric("Desvio Padr√£o (m¬≥)", format_num(desvio_padrao, 2))
        col3.metric("Vaz√£o M√©dia (L/s)", format_num(q_med, 2))
        # Segunda linha
        col1.metric("Vaz√£o M√°x. Di√°ria (L/s)", format_num(q_max_dia, 2))
        col2.metric("Vaz√£o M√°x. Hor√°ria (L/s)", format_num(q_max_hora, 2))
        col3.metric("Vaz√£o M√°x. Dia+Hora (L/s)", format_num(q_max_real, 2))

        st.header("4. Testes de Normalidade")
        stat_sw, p_sw = shapiro(consumo)
        stat_dp, p_dp = normaltest(consumo)
        stat_ks, p_ks = kstest(consumo, 'norm', args=(media, desvio_padrao))

        def interpreta(p):
            return "‚úîÔ∏è Aceita a hip√≥tese de normalidade." if p > 0.05 else "‚ùå Rejeita a hip√≥tese de normalidade."

        txt_sw = f"Shapiro-Wilk: Estat√≠stica = {format_num(stat_sw, 3)}; p-valor = {format_num(p_sw, 3)} ‚Äî {interpreta(p_sw)}"
        txt_dp = f"D'Agostino e Pearson: Estat√≠stica = {format_num(stat_dp, 3)}; p-valor = {format_num(p_dp, 3)} ‚Äî {interpreta(p_dp)}"
        txt_ks = f"Kolmogorov-Smirnov (KS): Estat√≠stica = {format_num(stat_ks, 3)}; p-valor = {format_num(p_ks, 3)} ‚Äî {interpreta(p_ks)}"

        st.write(f"**{txt_sw}**")
        st.write(f"**{txt_dp}**")
        st.write(f"**{txt_ks}**")

        # Novo campo para escolha da apresenta√ß√£o do histograma
        tipo_hist = st.selectbox("Tipo de apresenta√ß√£o do histograma:", ["Frequ√™ncia Absoluta", "Densidade de Probabilidade"])
        if tipo_hist == "Densidade de Probabilidade":
            stat_param = "density"
        else:
            stat_param = "count"

        st.header("5. Gr√°fico de Distribui√ß√£o")
        fig1, ax1 = plt.subplots(figsize=(10, 5))
        sns.histplot(consumo, kde=True, stat=stat_param, color="skyblue", edgecolor="black", bins=12, ax=ax1)
        x_vals = np.linspace(min(consumo), max(consumo), 1000)
        # Se o histograma for em frequ√™ncia absoluta, escalamos a curva normal
        if stat_param == "count":
            bin_width = (max(consumo) - min(consumo)) / 12
            n = len(consumo)
            normal_curve = norm.pdf(x_vals, loc=media, scale=desvio_padrao) * n * bin_width
        else:
            normal_curve = norm.pdf(x_vals, loc=media, scale=desvio_padrao)
        ax1.plot(x_vals, normal_curve, color='red', linestyle='--', label='Distribui√ß√£o Normal')
        ax1.axvline(consumo_ref, color='black', linestyle=':', label=f'{percentil}% ‚âà {format_num(consumo_ref, 0)} m¬≥')
        ax1.set_xlabel("Consumo mensal (m¬≥)")
        ax1.set_ylabel("Frequ√™ncia" if stat_param=="count" else "Densidade estimada")
        ax1.set_title("Distribui√ß√£o do Consumo com KDE e Normal")
        ax1.legend()
        st.pyplot(fig1)

        st.header("6. Fun√ß√µes de Distribui√ß√£o Acumulada")
        fig_temp2, ax_temp2 = plt.subplots()
        kde_plot = sns.kdeplot(consumo, bw_adjust=1, ax=ax_temp2)
        kde_y2 = kde_plot.get_lines()[0].get_ydata()
        kde_x2 = kde_plot.get_lines()[0].get_xdata()
        plt.close(fig_temp2)
        cdf_kde2 = np.cumsum(kde_y2)
        cdf_kde2 = cdf_kde2 / cdf_kde2[-1]
        cdf_norm = norm.cdf(kde_x2, loc=media, scale=desvio_padrao)

        fig2, ax2 = plt.subplots(figsize=(8, 5))
        ax2.plot(kde_x2, cdf_kde2, label='CDF da KDE', color='blue')
        ax2.plot(kde_x2, cdf_norm, label='CDF da Normal', color='red', linestyle='--')
        ax2.set_title("Fun√ß√µes de Distribui√ß√£o Acumulada (CDF) KDE vs Distribui√ß√£o Normal")
        ax2.set_xlabel("Consumo mensal de √°gua (m¬≥)")
        ax2.set_ylabel("Probabilidade acumulada")
        ax2.legend()
        ax2.grid(True)
        st.pyplot(fig2)

        st.header("Relat√≥rio em Word")
        if st.button("Gerar Relat√≥rio Word"):
            doc = Document()
            # Ajuste das margens: superior e inferior = 2 cm; esquerda e direita = 2,5 cm
            for section in doc.sections:
                section.top_margin = Cm(2)
                section.bottom_margin = Cm(2)
                section.left_margin = Cm(2.5)
                section.right_margin = Cm(2.5)
            
            doc.add_heading("Relat√≥rio de Consumo Referencial", 0)
            doc.add_heading("Dados do Projeto", level=1)
            doc.add_paragraph(f"Nome do Projeto: {nome_projeto}")
            doc.add_paragraph(f"T√©cnico Operador: {tecnico_operador}")
            doc.add_paragraph(f"Tipo de Medi√ß√£o: {tipo_medicao}")
            doc.add_heading("Par√¢metros de Entrada", level=1)
            doc.add_paragraph(f"Modelo Estat√≠stico: {modelo}")
            doc.add_paragraph(f"Percentil de Projeto: {percentil}%")
            doc.add_paragraph(f"N√∫mero de dias do m√™s: {dias_mes}")
            doc.add_paragraph(f"N√∫mero de horas di√°rias de opera√ß√£o: {horas_operacao}")
            doc.add_paragraph(f"Tempo di√°rio (s): {tempo_dia}")
            doc.add_paragraph(f"K1 (m√°x. di√°ria): {format_num(k1, 2)}")
            doc.add_paragraph(f"K2 (m√°x. hor√°ria): {format_num(k2, 2)}")
            doc.add_heading("Resultados", level=1)
            doc.add_paragraph(f"Consumo Referencial (m¬≥): {format_num(consumo_ref, 0)}")
            doc.add_paragraph(f"Desvio Padr√£o (m¬≥): {format_num(desvio_padrao, 2)}")
            doc.add_paragraph(f"Vaz√£o M√©dia (L/s): {format_num(q_med, 2)}")
            doc.add_paragraph(f"Vaz√£o M√°x. Di√°ria (L/s): {format_num(q_max_dia, 2)}")
            doc.add_paragraph(f"Vaz√£o M√°x. Hor√°ria (L/s): {format_num(q_max_hora, 2)}")
            doc.add_paragraph(f"Vaz√£o M√°x. Dia+Hora (L/s): {format_num(q_max_real, 2)}")
            doc.add_heading("Testes de Normalidade", level=1)
            doc.add_paragraph(txt_sw)
            doc.add_paragraph(txt_dp)
            doc.add_paragraph(txt_ks)
            img_buffer1 = BytesIO()
            fig1.savefig(img_buffer1, format="png", dpi=150)
            img_buffer1.seek(0)
            doc.add_heading("Gr√°fico de Distribui√ß√£o", level=1)
            doc.add_picture(img_buffer1, width=Inches(6))
            img_buffer2 = BytesIO()
            fig2.savefig(img_buffer2, format="png", dpi=150)
            img_buffer2.seek(0)
            doc.add_heading("Fun√ß√µes de Distribui√ß√£o Acumulada", level=1)
            doc.add_picture(img_buffer2, width=Inches(6))
            doc_buffer = BytesIO()
            doc.save(doc_buffer)
            doc_buffer.seek(0)
            st.download_button(
                label="Baixar Relat√≥rio Word",
                data=doc_buffer.getvalue(),
                file_name="Relatorio_Consumo.docx",
                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
            )

# 5) Aba "Gerar Histograma"
elif aba == "üìä Gerar Histograma":
    st.title("Gerar Tabela de Consumo Mensal")
    st.markdown("Informe os dados do projeto para gerar uma planilha de consumo mensal de √°gua tratada.")
    ano_inicial = st.number_input("Ano Inicial", min_value=2000, max_value=2100, value=2020, step=1)
    ano_final = st.number_input("Ano Final", min_value=2000, max_value=2100, value=2025, step=1)
    populacao = st.number_input("Popula√ß√£o atendida", min_value=1000, value=80000, step=1000)
    if st.button("Criar Planilha"):
        if ano_final < ano_inicial:
            st.error("O Ano Final deve ser maior ou igual ao Ano Inicial.")
        else:
            anos = list(range(int(ano_inicial), int(ano_final) + 1))
            meses = ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun",
                     "Jul", "Ago", "Set", "Out", "Nov", "Dez"]
            fator = populacao / 50000.0
            media_baseline = 300000 * fator
            std_baseline = 50000 * fator
            registros = []
            for ano in anos:
                for mes in meses:
                    consumo_val = int(np.random.normal(media_baseline, std_baseline))
                    mes_ano = f"{mes}/{ano}"
                    registros.append({"M√™s": mes_ano, "Consumo (m¬≥)": consumo_val})
            df_gerado = pd.DataFrame(registros)
            st.dataframe(df_gerado)
            csv_gerado = df_gerado.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="Baixar Planilha CSV",
                data=csv_gerado,
                file_name="Consumo_Mensal_Agua_Tratada.csv",
                mime="text/csv"
            )

# 6) Aba "‚ÑπÔ∏è Sobre esse App"
elif aba == "‚ÑπÔ∏è Sobre esse App":
    st.title("Sobre esse App")
    # HTML com estilo unificado (fonte Arial, tamanho 16, espa√ßamento 1.5)
    # Adicionado li { margin-bottom: 2em; } para espa√ßamento duplo entre itens numerados
    html_content = """
    <!DOCTYPE html>
    <html lang="pt-BR">
    <head>
      <meta charset="UTF-8" />
      <title>Sobre esse App</title>
      <style>
        body, h1, h2, h3, p, ol, ul, li {
          font-family: "Arial", sans-serif;
          font-size: 16px;
          line-height: 1.5;
        }
        li {
          margin-bottom: 2em; /* Espa√ßamento duplo entre itens numerados */
        }
        .page { 
          display: none; 
          margin: 20px; 
        }
        .page.active { 
          display: block; 
        }
        .nav-buttons { 
          margin-top: 20px; 
        }
        button { 
          margin: 5px; 
          padding: 8px 16px; 
          cursor: pointer; 
        }
        code {
          background-color: #f5f5f5; 
          padding: 2px 4px; 
          font-size: 90%; 
          border-radius: 4px; 
          font-family: Consolas, monospace;
        }
      </style>
      <!-- MathJax para renderizar LaTeX -->
      <script>
        window.MathJax = {
          tex: { inlineMath: [['$', '$'], ['\\(', '\\)']] }
        };
      </script>
      <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js"></script>
    </head>
    <body>
      <!-- P√°gina 1 -->
      <div class="page active" id="page1">
        <h1>Sobre este Aplicativo</h1>
        <p>
          Este aplicativo foi desenvolvido em <code>Python</code> utilizando a biblioteca <code>Streamlit</code> 
          para an√°lise estat√≠stica de consumo de √°gua. Ele permite o carregamento de arquivos CSV com dados de consumo, 
          realiza c√°lculos estat√≠sticos, gera gr√°ficos e produz relat√≥rios. Al√©m do consumo mensal referencial, 
          o aplicativo tamb√©m calcula as vaz√µes m√©dias em fun√ß√£o dos dias de opera√ß√£o do sistema, possibilitando 
          avaliar a varia√ß√£o dessas vaz√µes como uma estimativa preliminar para an√°lise do projetista.
        </p>
        <p>
          Para maior flexibilidade, foi inclu√≠do um fator de ajuste baseado no n√∫mero de horas di√°rias de opera√ß√£o 
          do sistema, permitindo ajustar as equa√ß√µes de vaz√£o. Dessa forma, √© poss√≠vel simular diferentes cen√°rios 
          de opera√ß√£o entre 1 hora e 24 horas di√°rias.
        </p>
        <div class="nav-buttons">
          <button onclick="showPage(2)">Pr√≥xima &raquo;</button>
        </div>
      </div>

      <!-- P√°gina 2 -->
      <div class="page" id="page2">
        <h2>Estrutura do C√≥digo</h2>
        <ol>
          <li>
            <strong>Importa√ß√µes e Configura√ß√µes:</strong> Importa bibliotecas como 
            <code>pandas</code>, <code>numpy</code>, <code>matplotlib</code>, <code>seaborn</code> 
            e faz a chamada <code>st.set_page_config</code> logo no in√≠cio, sendo a primeira instru√ß√£o de Streamlit.
          </li>
          <li>
            <strong>Session State:</strong> Utiliza <code>st.session_state</code> para manter dados entre intera√ß√µes.
          </li>
          <li>
            <strong>Menu de Navega√ß√£o:</strong> Define as funcionalidades do app, como 
            <em>C√°lculo do Consumo</em>, <em>Gerar Histograma</em>, <em>Sobre esse App</em> e 
            <em>Sobre o Modelo Estat√≠stico</em>.
          </li>
          <li>
            <strong>C√°lculo do Consumo:</strong> Permite o upload do CSV, configura par√¢metros, incluindo n√∫mero 
            de horas di√°rias de opera√ß√£o, executa c√°lculos estat√≠sticos e gera gr√°ficos.
          </li>
          <li>
            <strong>Relat√≥rio em Word:</strong> Gera um documento com os resultados e gr√°ficos utilizando 
            a biblioteca <code>python-docx</code>.
          </li>
        </ol>
        <div class="nav-buttons">
          <button onclick="showPage(1)">&laquo; Anterior</button>
          <button onclick="showPage(3)">Pr√≥xima &raquo;</button>
        </div>
      </div>

      <!-- P√°gina 3 -->
      <div class="page" id="page3">
        <h2>C√°lculos e Equa√ß√µes</h2>
        <p>
          Um dos c√°lculos principais √© a determina√ß√£o do consumo referencial. Para o modelo de distribui√ß√£o normal, usamos:
          $$ f(x) = \\frac{1}{\\sigma\\sqrt{2\\pi}} \\exp\\Bigl(-\\frac{(x-\\mu)^2}{2\\sigma^2}\\Bigr). $$
        </p>
        <p>
          Os testes de normalidade: Shapiro-Wilk, D'Agostino-Pearson e Kolmogorov-Smirnov, que verificam se os dados 
          seguem uma distribui√ß√£o normal, aceitando a hip√≥tese quando 
          $$ p\\text{-valor} > 0.05. $$
        </p>
        <p>
          Al√©m disso, o fator de ajuste <em>r</em> √© dado por 
          $$ r = \\frac{24}{t}, $$
          onde <em>t</em> √© o n√∫mero de horas di√°rias de opera√ß√£o entre 1 e 24 horas. 
          Esse fator multiplica as equa√ß√µes de vaz√£o, permitindo avaliar cen√°rios de opera√ß√£o em per√≠odos reduzidos, como 
          por exemplo, apenas 8 horas por dia ou per√≠odo integral de 24 horas.
        </p>
        <div class="nav-buttons">
          <button onclick="showPage(2)">&laquo; Anterior</button>
          <button onclick="showPage(4)">Pr√≥xima &raquo;</button>
        </div>
      </div>

      <!-- P√°gina 4 -->
      <div class="page" id="page4">
        <h2>Equa√ß√µes de Vaz√£o e Vari√°veis</h2>
        <p>
          Para calcular as vaz√µes, definimos inicialmente:
        </p>
        <ul>
          <li><strong>Consumo Referencial</strong>: valor estat√≠stico que representa o consumo mensal alvo (m¬≥).</li>
          <li><strong>Dias de Opera√ß√£o</strong> (<em>dias_mes</em>): n√∫mero de dias no m√™s considerado.</li>
          <li><strong>Horas de Opera√ß√£o</strong> (<em>t</em>): quantas horas por dia o sistema fica operando.</li>
          <li><strong>Fator de Ajuste</strong> (<em>r</em>): $$r = \\frac{24}{t}.$$</li>
          <li><strong>k1</strong>: coeficiente de m√°xima di√°ria.</li>
          <li><strong>k2</strong>: coeficiente de m√°xima hor√°ria.</li>
        </ul>
        <p>
          A vaz√£o m√©dia b√°sica (<em>q_med_base</em>) √© calculada por:
        </p>
        <p>
          $$ q_{\\text{med\\_base}} = \\frac{\\text{Consumo Referencial}}{\\text{dias\\_mes}} 
          \\times \\frac{1}{\\text{tempo\\_dia}} \\times 1000. $$
        </p>
        <p>
          Em seguida, aplicamos o fator <em>r</em> para obter a vaz√£o m√©dia final:
        </p>
        <p>
          $$ q_{\\text{med}} = q_{\\text{med\\_base}} \\times r. $$
        </p>
        <p>
          As demais vaz√µes s√£o:
        </p>
        <ul>
          <li><em>Vaz√£o M√°x. Di√°ria</em>: $$ q_{\\text{max\\_dia}} = q_{\\text{med}} \\times k1. $$</li>
          <li><em>Vaz√£o M√°x. Hor√°ria</em>: $$ q_{\\text{max\\_hora}} = q_{\\text{med}} \\times k2. $$</li>
          <li><em>Vaz√£o M√°x. Dia+Hora</em>: $$ q_{\\text{max\\_real}} = q_{\\text{med}} \\times k1 \\times k2. $$</li>
        </ul>
        <div class="nav-buttons">
          <button onclick="showPage(3)">&laquo; Anterior</button>
        </div>
      </div>

      <script>
        function showPage(pageNumber) {
          document.getElementById("page1").classList.remove("active");
          document.getElementById("page2").classList.remove("active");
          document.getElementById("page3").classList.remove("active");
          document.getElementById("page4").classList.remove("active");
          document.getElementById("page" + pageNumber).classList.add("active");
        }
      </script>
    </body>
    </html>
    """
    st.components.v1.html(html_content, height=800, scrolling=True)

# 7) Aba "üìò Sobre o Modelo Estat√≠stico"
elif aba == "üìò Sobre o Modelo Estat√≠stico":
    st.title("üìò Sobre o Modelo Estat√≠stico")
    pdf_file = "03_Estatistica_2025.pdf"
    if os.path.exists(pdf_file):
        with open(pdf_file, "rb") as f:
            pdf_bytes = f.read()
        st.download_button(
            label="Baixar Relat√≥rio PDF",
            data=pdf_bytes,
            file_name="03_Estatistica_2025.pdf",
            mime="application/pdf"
        )
    else:
        st.warning(f"Arquivo PDF '{pdf_file}' n√£o encontrado no diret√≥rio atual.")

